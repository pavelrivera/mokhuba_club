
{% extends 'admin/admin_base.html.twig' %}
{% block stylesheets %}
{{ parent() }}
<style>

    /* =====================================================
       CONTENT AREA
    ===================================================== */
    .admin-content {
        padding: 32px;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 24px;
        margin-bottom: 32px;
    }

    .stat-card {
        background: rgba(45, 24, 23, 0.8);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(212, 175, 55, 0.3);
        border-radius: 16px;
        padding: 24px;
        transition: var(--transition-smooth);
        position: relative;
        overflow: hidden;
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, var(--gold-primary), var(--gold-secondary));
    }

    .stat-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-strong);
        border-color: var(--gold-primary);
    }

    .stat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
    }

    .stat-title {
        font-size: 0.875rem;
        color: rgba(255, 248, 220, 0.8);
        margin: 0;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        background: rgba(212, 175, 55, 0.2);
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--gold-primary);
        font-size: 1.2rem;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--cream);
        margin: 0 0 8px 0;
        font-family: var(--font-heading);
    }

    .stat-change {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 0.875rem;
    }

    .stat-change.positive {
        color: var(--success);
    }

    .stat-change.negative {
        color: var(--error);
    }

    .stat-change.neutral {
        color: rgba(255, 248, 220, 0.6);
    }

    /* =====================================================
       CONTENT CARDS
    ===================================================== */
    .content-section {
        margin-bottom: 32px;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .section-title {
        font-size: 1.25rem;
        color: var(--cream);
        margin: 0;
        font-family: var(--font-heading);
    }

    .content-card {
        background: rgba(45, 24, 23, 0.8);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(212, 175, 55, 0.3);
        border-radius: 16px;
        overflow: hidden;
    }

    .card-header {
        padding: 20px 24px;
        border-bottom: 1px solid rgba(212, 175, 55, 0.2);
        background: linear-gradient(135deg, rgba(212, 175, 55, 0.1), rgba(184, 148, 31, 0.05));
    }

    .card-body {
        padding: 24px;
    }

    /* =====================================================
       TABLES
    ===================================================== */
    .table-wrapper {
        overflow-x: auto;
        max-height: 600px;
        overflow-y: auto;
    }

    .table-table {
        width: 100%;
        border-collapse: collapse;
    }

    .table-table th {
        background: rgba(212, 175, 55, 0.1);
        padding: 16px 20px;
        text-align: left;
        color: var(--gold-primary);
        font-weight: 600;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-bottom: 1px solid rgba(212, 175, 55, 0.3);
        position: sticky;
        top: 0;
    }

    .table-table td {
        padding: 16px 20px;
        border-bottom: 1px solid rgba(212, 175, 55, 0.2);
        color: var(--cream);
        vertical-align: middle;
    }

    .table-table tr:hover {
        background: rgba(212, 175, 55, 0.05);
    }

    .table-cell {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .table-cell .avatar {
        width: 32px;
        height: 32px;
        background: linear-gradient(135deg, var(--gold-primary), var(--gold-secondary));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--dark-brown);
        font-weight: 600;
        font-size: 0.875rem;
    }

    .actions-cell {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    .btn-secondary {
        background: transparent;
        border: 1px solid rgba(212, 175, 55, 0.5);
        color: var(--gold-primary);
    }

     /* =====================================================
       MODAL PREMIUM STYLES
    ===================================================== */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.85);
        backdrop-filter: blur(8px);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .modal-overlay:not(.hidden) {
        opacity: 1;
    }

    .premium-modal {
        background: linear-gradient(135deg, #2D1817, #3A1F1E);
        border: 2px solid #D4AF37;
        border-radius: 20px;
        box-shadow: 
            0 20px 60px rgba(0, 0, 0, 0.5),
            0 0 40px rgba(212, 175, 55, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
        max-width: 480px;
        width: 90%;
        max-height: 90vh;
        overflow: hidden;
        transform: scale(0.9);
        transition: transform 0.3s ease;
        position: relative;
    }

    .modal-overlay:not(.hidden) .premium-modal {
        transform: scale(1);
    }

    .premium-modal::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #D4AF37, #B8941F, #D4AF37);
    }

    .modal-header-premium {
        padding: 32px 32px 24px;
        text-align: center;
        position: relative;
        background: linear-gradient(135deg, rgba(212, 175, 55, 0.1), transparent);
    }

    .modal-icon-container {
        width: 64px;
        height: 64px;
        background: linear-gradient(135deg, #D4AF37, #B8941F);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 16px;
        box-shadow: 0 8px 24px rgba(212, 175, 55, 0.4);
    }

    .modal-icon-container i {
        font-size: 1.8rem;
        color: #2D1817;
    }

    .modal-icon-container.warning {
        background: linear-gradient(135deg, #f59e0b, #f59e0b);
    }

    .modal-icon-container.warning i {
        color: white;
    }

    .modal-icon-container.error {
        background: linear-gradient(135deg, #ef4444, #dc2626);
    }

    .modal-icon-container.error i {
        color: white;
    }

    .modal-icon-container.success {
        background: linear-gradient(135deg, #059669, #047857);
    }

    .modal-icon-container.success i {
        color: white;
    }

    .modal-title-premium {
        font-size: 1.5rem;
        font-weight: 600;
        color: #FFF8DC;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .modal-close-btn {
        position: absolute;
        top: 16px;
        right: 16px;
        background: rgba(212, 175, 55, 0.2);
        border: 1px solid rgba(212, 175, 55, 0.4);
        color: #D4AF37;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .modal-close-btn:hover {
        background: #D4AF37;
        color: #2D1817;
        transform: rotate(90deg);
    }

    .modal-body-premium {
        padding: 0 32px 24px;
        text-align: center;
    }

    .modal-message {
        font-size: 1rem;
        line-height: 1.6;
        color: rgba(255, 248, 220, 0.9);
        margin: 0;
    }

    .modal-footer-premium {
        padding: 24px 32px 32px;
        display: flex;
        gap: 16px;
        justify-content: center;
    }

    .btn-modal-primary,
    .btn-modal-secondary {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.95rem;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 120px;
        justify-content: center;
    }

    .btn-modal-primary {
        background: linear-gradient(135deg, #D4AF37, #B8941F);
        color: #2D1817;
        box-shadow: 0 4px 12px rgba(212, 175, 55, 0.3);
    }

    .btn-modal-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(212, 175, 55, 0.4);
    }

    .btn-modal-secondary {
        background: transparent;
        border: 2px solid rgba(212, 175, 55, 0.5);
        color: #D4AF37;
    }

    .btn-modal-secondary:hover {
        background: rgba(212, 175, 55, 0.1);
        border-color: #D4AF37;
    }

    .hidden {
        display: none !important;
    }

    /* =====================================================
       ESTILOS ESPEC√çFICOS PARA FORMULARIOS DE MODALES
    ===================================================== */

    /* Form Groups */
    .form-group {
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .form-label {
        color: var(--gold-primary);
        font-weight: 600;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .form-input, .form-select {
        padding: 12px 16px;
        border: 2px solid rgba(212, 175, 55, 0.3);
        border-radius: 8px;
        background: rgba(45, 24, 23, 0.6);
        color: var(--cream);
        font-size: 0.875rem;
        transition: all 0.3s ease;
    }

    .form-input:focus, .form-select:focus {
        outline: none;
        border-color: var(--gold-primary);
        background: rgba(45, 24, 23, 0.8);
        box-shadow: 0 0 0 3px rgba(212, 175, 55, 0.1);
    }

    .form-input::placeholder {
        color: rgba(255, 248, 220, 0.5);
    }

    .form-select option {
        background: var(--dark-brown);
        color: var(--cream);
        padding: 8px;
    }

    /* Field Errors */
    .field-error {
        color: #ef4444;
        font-size: 0.75rem;
        min-height: 18px;
        display: flex;
        align-items: center;
        gap: 4px;
        opacity: 0;
        transform: translateY(-5px);
        transition: all 0.3s ease;
    }

    .field-error.active {
        opacity: 1;
        transform: translateY(0);
    }

    .field-error::before {
        content: '‚ö† ';
    }

    /* Checkboxes */
    .form-checkbox {
        display: flex;
        align-items: center;
        gap: 12px;
        cursor: pointer;
        padding: 8px;
        border-radius: 6px;
        transition: background 0.3s ease;
    }

    .form-checkbox:hover {
        background: rgba(212, 175, 55, 0.05);
    }

    .form-checkbox input[type="checkbox"] {
        display: none;
    }

    .checkmark {
        width: 20px;
        height: 20px;
        border: 2px solid rgba(212, 175, 55, 0.5);
        border-radius: 4px;
        position: relative;
        transition: all 0.3s ease;
    }

    .form-checkbox input[type="checkbox"]:checked + .checkmark {
        background: var(--gold-primary);
        border-color: var(--gold-primary);
    }

    .form-checkbox input[type="checkbox"]:checked + .checkmark::after {
        content: '‚úì';
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        color: var(--dark-brown);
        font-weight: bold;
        font-size: 0.875rem;
    }

    .checkbox-label {
        color: rgba(255, 248, 220, 0.9);
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    /* User Preview */
    .user-preview {
        background: rgba(212, 175, 55, 0.1);
        border: 1px solid rgba(212, 175, 55, 0.3);
        border-radius: 12px;
        padding: 16px;
        transition: all 0.3s ease;
    }

    .user-preview:not(.hidden) {
        animation: slideIn 0.3s ease;
    }

    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .preview-header {
        color: var(--gold-primary);
        font-weight: 600;
        margin-bottom: 12px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .preview-content {
        display: flex;
        align-items: center;
        gap: 16px;
        margin-bottom: 16px;
    }

    .preview-avatar {
        width: 48px;
        height: 48px;
        background: linear-gradient(135deg, var(--gold-primary), var(--gold-secondary));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--dark-brown);
        font-weight: bold;
        font-size: 1.2rem;
    }

    .preview-details {
        flex: 1;
    }

    .preview-name {
        font-weight: 600;
        color: var(--cream);
        font-size: 1rem;
        margin-bottom: 4px;
    }

    .preview-email {
        color: rgba(255, 248, 220, 0.7);
        font-size: 0.875rem;
        margin-bottom: 4px;
    }

    .preview-membership {
        color: var(--gold-primary);
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .preview-codes {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 12px;
    }

    .preview-code {
        font-size: 0.75rem;
        color: rgba(255, 248, 220, 0.8);
    }

    .preview-code code {
        background: rgba(45, 24, 23, 0.8);
        padding: 4px 8px;
        border-radius: 4px;
        color: var(--gold-primary);
        font-family: monospace;
        display: inline-block;
        margin-left: 4px;
    }

    .form-flex-responsive {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
        margin-bottom: 20px;
    }

    .form-flex-responsive .form-group {
        flex: 1 1 calc(50% - 8px);
        min-width: 250px;
    }

    /* Tablets */
    @media (max-width: 768px) {
        .modal-body-premium {
            padding: 0 20px !important;
        }
        
        .form-flex-responsive .form-group {
            flex: 1 1 100%;
            min-width: auto;
        }
    }

    /* M√≥viles peque√±os */
    @media (max-width: 480px) {
        .modal-body-premium {
            padding: 0 16px !important;
        }
        
        .form-flex-responsive {
            gap: 12px;
        }
    }

</style>
{% endblock %}
{% block admin_main %}
    <!-- Header -->
    <header class="admin-header">
        <div class="header-content">
            <div>
                <button class="mobile-menu-btn" onclick="toggleSidebar()">
                    <i class="fas fa-bars"></i>
                </button>
                <h1 class="page-title">Gesti√≥n de Membres√≠as</h1>
                <p class="page-subtitle">Administra todas los membres√≠as del club </p>
            </div>

            <div class="header-actions">
                <div class="admin-user">
                    <div class="user-avatar">
                        {{ user.firstName|first|upper }}{{ user.lastName|first|upper }}
                    </div>
                    <div class="user-info">
                        <div class="user-name">{{ user.firstName }} {{ user.lastName }}</div>
                        <div class="user-role">Administrador</div>
                    </div>
                </div>

                <a href="{{ path('auth_logout') }}" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Salir</span>
                </a>
            </div>
        </div>
    </header>

    <!-- Content -->
    <div class="admin-content">

        <div class="content-section">

            <div class="content-card">
                <div class="table-wrapper">
                    <table class="table-table">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Precio</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="tableBody">
                            {% if membership is defined and membership is not empty %}
                                {% for membership_item in membership %}
                                    <tr class="table-row" 
                                        data-id="{{ membership_item.id }}">
                                        
                                        <td>
                                            <code style="background: rgba(212, 175, 55, 0.2); padding: 4px 8px; border-radius: 4px; color: var(--gold-primary); font-size: 0.8rem;">
                                                {{ membership_item.getNombre() }}
                                            </code>
                                        </td>
                                        
                                        <td>{{ membership_item.getPrecio()|number_format(2, ',', '.')  }}</td>
                                        <td>
                                            <div class="actions-cell">
                                                <button class="btn btn-secondary btn-sm" onclick="editMembresia({{ membership_item.id }})" title="Editar">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                {% endfor %}
                            {% else %}
                                <tr>
                                    <td colspan="7" style="text-align: center; padding: 40px;">
                                        <div style="color: rgba(255, 248, 220, 0.7);">
                                            <i class="fas fa-users" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                                            <h3>No hay membres√≠as registradass</h3>
                                            <p>Las nuevas membres√≠as aparecer√°n aqu√≠ una vez que se registren.</p>
                                        </div>
                                    </td>
                                </tr>
                            {% endif %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Editar Membresia -->
    <div id="editMembresiaModal" class="modal-overlay hidden" onclick="closeEditMembresiaModal(event)">
        <div class="premium-modal" onclick="event.stopPropagation()" style="max-width: 600px;">
            <div class="modal-header-premium">
                <div class="modal-icon-container" style="background: linear-gradient(135deg, #f59e0b, #f59e0b);">
                    <i class="fas fa-edit" style="color: white;"></i>
                </div>
                <h3 class="modal-title-premium">Editar Membres√≠a</h3>
                <button class="modal-close-btn" onclick="closeEditMembresiaModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="modal-body-premium" style="padding: 0 32px;">
                <div id="editMembresiaFormContainer">
                    <!-- Flexbox responsive -->
                    <div class="form-flex-responsive">
                        <!-- Nombre -->
                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-user"></i>
                                Nombre *
                            </label>
                            <input type="text" 
                                id="editNombre" 
                                name="editNombre" disabled 
                                class="form-input" 
                                placeholder="Nombre de la membres√≠a" 
                                required>
                            <div class="field-error" id="editNombreError"></div>
                        </div>

                        <!-- Precio -->
                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-dollar-sign"></i>
                                Precio *
                            </label>
                            <input type="number" 
                                id="editPrecio" 
                                name="editPrecio" 
                                class="form-input" 
                                placeholder="0.00" 
                                step="0.01"
                                min="0"
                                required>
                            <div class="field-error" id="editPrecioError"></div>
                        </div>
                    </div>

                    <input type="hidden" id="editMembresiaId" value="">
                </div>
            </div>
            
            <div class="modal-footer-premium">
                <button type="button" class="btn-modal-secondary" onclick="closeEditMembresiaModal()">
                    <i class="fas fa-times"></i>
                    <span>Cancelar</span>
                </button>
                <button type="button" class="btn-modal-primary" onclick="handleEditMembresia()">
                    <i class="fas fa-save"></i>
                    <span>Guardar Cambios</span>
                </button>
            </div>
        </div>
    </div>
{% endblock %}
{% block javascripts %}
{{ parent() }}
<script>

// Symfony exige id num√©rico; usamos 0 como placeholder y lo reemplazamos en JS.
  const ROUTES = {
    get:    "{{ path('admin_memberships_get',            { id: 0 }) }}",
    edit:   "{{ path('admin_memberships_edit',           { id: 0 }) }}"
  };
  function membresiaUrl(tpl, id) {
    // Reemplaza la primera ocurrencia de "/0" por "/<id>"
    return (tpl || '').replace(/\/0(\/|$)/, '/' + String(id) + '$1');
  }

  // =====================================================
// MODALES DE √âXITO Y ERROR
// =====================================================

function showSuccessMessage(data) {
    console.log('üéâ Mostrando mensaje de √©xito:', data);
    
    const membership = data.membership;
    const credentials = data.credentials;
    
    const successModal = document.createElement('div');
    successModal.id = 'successModal';
    successModal.className = 'modal-overlay';
    successModal.innerHTML = `
        <div class="premium-modal" style="max-width: 500px;">
            <div class="modal-header-premium">
                <div class="modal-icon-container success">
                    <i class="fas fa-check" style="color: white;"></i>
                </div>
                <h3 class="modal-title-premium">${credentials ? 'Membres√≠a Creado Exitosamente!' : 'Membres√≠a Actualizado!'}</h3>
            </div>
            
            <div class="modal-body-premium" style="text-align: left; padding: 0 32px 24px;">
                <div class="success-details">
                    <div class="user-created-info">
                        <div class="created-details">
                            <p><strong>Nombre:</strong> ${membership.nombre}</p>
                            <p><strong>Precio:</strong> <code>${membership.precio}</code></p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer-premium">
                <button class="btn-modal-primary" onclick="closeSuccessModal()" style="width: 100%;">
                    <i class="fas fa-check"></i>
                    <span>Perfecto, Entendido</span>
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(successModal);
    successModal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
    
    setTimeout(() => {
        closeSuccessModal();
        setTimeout(() => location.reload(), 500);
    }, 8000);
}

function closeSuccessModal() {
    console.log('üîÑ Cerrando modal de √©xito');
    
    const successModal = document.getElementById('successModal');
    if (successModal) {
        successModal.remove();
        document.body.style.overflow = '';
    }
    
    setTimeout(() => location.reload(), 300);
}

function showErrorMessage(errorMessage, details = '') {
    console.log('‚ùå Mostrando modal de error:', errorMessage);
    
    const errorModal = document.createElement('div');
    errorModal.id = 'errorModal';
    errorModal.className = 'modal-overlay';
    errorModal.innerHTML = `
        <div class="premium-modal" style="max-width: 450px;">
            <div class="modal-header-premium">
                <div class="modal-icon-container error">
                    <i class="fas fa-exclamation-triangle" style="color: white;"></i>
                </div>
                <h3 class="modal-title-premium">Error</h3>
                <button class="modal-close-btn" onclick="closeErrorModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="modal-body-premium">
                <p class="modal-message">${errorMessage}</p>
                ${details ? `<div style="margin-top: 16px; padding: 12px; background: rgba(239, 68, 68, 0.1); border-radius: 8px; font-size: 0.875rem; color: rgba(255, 248, 220, 0.8);">${details}</div>` : ''}
            </div>
            
            <div class="modal-footer-premium">
                <button class="btn-modal-primary" onclick="closeErrorModal()" style="width: 100%;">
                    <i class="fas fa-times"></i>
                    <span>Entendido</span>
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(errorModal);
    errorModal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function closeErrorModal() {
    console.log('üîÑ Cerrando modal de error');
    
    const errorModal = document.getElementById('errorModal');
    if (errorModal) {
        errorModal.remove();
        document.body.style.overflow = '';
    }
}

// Limpiar todos los errores de campo
function clearAllErrors() {
    console.log('üßπ Limpiando todos los errores...');
    
    const errorElements = document.querySelectorAll('.field-error');
    errorElements.forEach(error => {
        error.classList.remove('active');
        error.textContent = '';
    });
    
    console.log('‚úÖ Errores limpiados');
}


// =====================================================
// FUNCIONES DEL MODAL EDITAR MEMBRESIA (CORREGIDAS)
// =====================================================

let currentEditingMembresiaId = null;
let originalMembresiaData = null;
let pendingEditData = null;

// Funci√≥n auxiliar para mostrar errores de campo
function showFieldError(fieldId, message) {
    const errorElement = document.getElementById(fieldId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.classList.add('active');
    }
}

function editMembresia(membresiaId) {
    console.log('‚úèÔ∏è Iniciando edici√≥n de membres√≠a:', membresiaId);
    
    currentEditingMembresiaId = membresiaId;
    
    fetch(membresiaUrl(ROUTES.get, membresiaId), {
        method: 'GET',
        headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json'
        }
    })
    .then(response => {
        console.log('üì° Respuesta de obtener membres√≠a, status:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('‚úÖ Datos de la membres√≠a obtenidos:', data);
        
        if (data.success) {
            originalMembresiaData = data.membership;
            openEditMembresiaModal(data.membership);
        } else {
            showErrorMessage('Error al cargar membres√≠a', data.error || 'No se pudieron obtener los datos de la membres√≠a');
        }
    })
    .catch(error => {
        console.error('üí• Error al obtener membres√≠a:', error);
        
        let errorMessage = 'Error al cargar datos';
        let details = 'No se pudieron cargar los datos de la membres√≠a para editar';
        
        if (error.message.includes('404')) {
            errorMessage = 'Membres√≠a no encontrada';
            details = 'La membres√≠a especificada no existe en el sistema.';
        } else if (error.message.includes('403')) {
            errorMessage = 'Acceso denegado';
            details = 'No tiene permisos para editar membres√≠as.';
        }
        
        showErrorMessage(errorMessage, details);
    });
}

function openEditMembresiaModal(membresiaData) {
    console.log('üîß Abriendo modal de editar membres√≠a:', membresiaData);
    
    // Llenar los campos del formulario con los datos actuales
    document.getElementById('editMembresiaId').value = membresiaData.id;
    document.getElementById('editNombre').value = membresiaData.nombre || '';
    
    // Formatear precio correctamente
    const precio = parseFloat(membresiaData.precio || 0);
    document.getElementById('editPrecio').value = precio.toFixed(2);
    
    // Mostrar modal
    const modal = document.getElementById('editMembresiaModal');
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    
    // Focus en el primer campo
    setTimeout(() => {
        document.getElementById('editNombre').focus();
    }, 100);
}

function closeEditMembresiaModal(event) {
    if (event && event.target !== event.currentTarget) return;
    
    const modal = document.getElementById('editMembresiaModal');
    modal.classList.add('hidden');
    document.body.style.overflow = '';
    
    console.log('üîÑ Modal de editar cerrado, manteniendo currentEditingMembresiaId:', currentEditingMembresiaId);
}

function validateEditMembresiaForm() {
    console.log('üîç Validando formulario de editar membres√≠a...');
    
    let isValid = true;
    
    // Limpiar errores previos
    clearAllErrors();
    
    // Validar nombre
    const nombre = document.getElementById('editNombre')?.value.trim();
    if (!nombre) {
        showFieldError('editNombreError', 'El nombre es obligatorio');
        isValid = false;
    }
    
    // Validar precio
    const precioInput = document.getElementById('editPrecio')?.value.trim();
    if (!precioInput) {
        showFieldError('editPrecioError', 'El precio es obligatorio');
        isValid = false;
    } else {
        const precio = parseFloat(precioInput);
        if (isNaN(precio) || precio < 0) {
            showFieldError('editPrecioError', 'El precio debe ser un n√∫mero v√°lido');
            isValid = false;
        }
    }
    
    console.log(isValid ? '‚úÖ Formulario de edici√≥n v√°lido' : '‚ùå Formulario de edici√≥n inv√°lido');
    return isValid;
}

function handleEditMembresia() {
    console.log('üìù Iniciando actualizaci√≥n de membres√≠a...');
    console.log('üîç currentEditingMembresiaId actual:', currentEditingMembresiaId);
    
    if (!validateEditMembresiaForm()) { // CORREGIDO: validateEditMembresiaForm
        console.log('‚ùå Validaci√≥n de edici√≥n fallida');
        return false;
    }
    
    console.log('‚úÖ Formulario de edici√≥n v√°lido, recopilando datos...');
    
    const formData = {
        nombre: document.getElementById('editNombre').value.trim(),
        precio: parseFloat(document.getElementById('editPrecio').value.trim())
    };
    
    // GUARDAR en pendingEditData antes de cerrar modal
    pendingEditData = {
        membresiaId: currentEditingMembresiaId,
        formData: formData
    };
    
    console.log('üì¶ Datos de edici√≥n guardados temporalmente:', pendingEditData);
    
    // Cerrar modal primero
    closeEditMembresiaModal();
    
    // Mostrar confirmaci√≥n
    setTimeout(() => {
        showConfirmModal({
            title: 'Confirmar Cambios',
            message: `¬øGuardar los cambios para ${formData.nombre}?`,
            icon: 'fas fa-save',
            confirmText: 'Guardar Cambios',
            cancelText: 'Cancelar',
            onConfirm: () => {
                console.log('‚úÖ Usuario confirm√≥ cambios, enviando al backend...');
                console.log('üîç Usando pendingEditData:', pendingEditData);
                
                if (pendingEditData && pendingEditData.membresiaId) {
                    submitEditMembresia(pendingEditData.membresiaId, pendingEditData.formData);
                } else {
                    showErrorMessage('Error de datos', 'Se perdi√≥ la referencia de la membres√≠a. Intente nuevamente.');
                }
            }
        });
    }, 300);
    
    return false;
}

function submitEditMembresia(membresiaId, membresiaData) {
    console.log('üöÄ Enviando datos actualizados al backend:', { membresiaId, membresiaData });
    
    // Validar que el membresiaId no sea null o undefined
    if (!membresiaId || membresiaId === 'null' || membresiaId === null || membresiaId === undefined) {
        console.error('‚ùå Error: membresiaId es inv√°lido:', membresiaId);
        showErrorMessage('Error de datos', 'ID de membres√≠a inv√°lido. Intente cerrar y abrir el modal nuevamente.');
        return;
    }
    
    fetch(membresiaUrl(ROUTES.edit, membresiaId), { // CORREGIDO: membresiaUrl 
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json'
        },
        body: JSON.stringify(membresiaData)
    })
    .then(response => {
        console.log('üì° Respuesta de actualizaci√≥n recibida, status:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        return response.json();
    })
    .then(data => {
        console.log('‚úÖ Respuesta de actualizaci√≥n parseada:', data);
        
        if (data.success) {
            showSuccessMessage({
                membership: data.membership,
                credentials: null
            });
            
            // Limpiar variables despu√©s del √©xito
            setTimeout(() => {
                resetEditMembresiaForm();
            }, 500);
        } else {
            showErrorMessage(
                data.error || 'No se pudo actualizar la membres√≠a',
                data.validation_errors ? 'Errores de validaci√≥n: ' + data.validation_errors.join(', ') : ''
            );
        }
    })
    .catch(error => {
        console.error('üí• Error al actualizar membres√≠a:', error);
        
        let errorMessage = 'Error de conexi√≥n al servidor';
        let details = '';
        
        if (error.message.includes('404')) {
            errorMessage = 'Membres√≠a no encontrada';
            details = 'La membres√≠a especificada no existe en el sistema.';
        } else if (error.message.includes('403')) {
            errorMessage = 'Acceso denegado';
            details = 'No tiene permisos para editar membres√≠as.';
        } else if (error.message.includes('400')) {
            errorMessage = 'Datos inv√°lidos';
            details = 'Verifique que todos los campos est√©n correctamente llenados.';
        } else if (error.message.includes('500')) {
            errorMessage = 'Error interno del servidor';
            details = 'Revise los logs de Symfony para m√°s detalles.';
        } else {
            details = 'Verifique su conexi√≥n a internet e intente nuevamente.';
        }
        
        showErrorMessage(errorMessage, details);
    });
}

function resetEditMembresiaForm() {
    console.log('üßπ Limpiando formulario de editar membres√≠a...');
    
    // Limpiar campos
    const fieldsToReset = ['editMembresiaId', 'editNombre', 'editPrecio'];
    fieldsToReset.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            field.value = '';
        }
    });
    
    // Limpiar errores
    clearAllErrors();
    
    // Reset variables
    currentEditingMembresiaId = null;
    originalMembresiaData = null;
    pendingEditData = null;
    
    console.log('‚úÖ Formulario de edici√≥n limpio');
}
</script>
{% endblock %}